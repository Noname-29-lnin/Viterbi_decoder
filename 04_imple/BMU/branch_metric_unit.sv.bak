module branch_metric_unit(
	 input logic 			i_clk,
	 input logic 			i_rst_n,	// i_rst_n = 1 reset, i_rst_n = 0 not reset
	 input logic 			i_en,		// i_en = 1 enable, i_en = 0 disable
	 
    input logic [1:0] 	i_data,
	 
    output logic [1:0]  o_BM_0,
    output logic [1:0]  o_BM_1,
    output logic [1:0]  o_BM_2,
    output logic [1:0]  o_BM_3
);

logic [1:0] w_BM_0, w_BM_1, w_BM_2, w_BM_3;

hamming_distance HD0(
		.i_a			(i_data[0]),
		.i_expect_a	(1'b0),
		.i_b			(i_data[1]),
		.i_expect_b	(1'b0),
		.o_a			(w_BM_0[0]),
	 	.o_b			(w_BM_0[1])
);

hamming_distance HD1(
		.i_a			(i_data[0]),
		.i_expect_a	(1'b1),
		.i_b			(i_data[1]),
		.i_expect_b	(1'b0),
		.o_a			(w_BM_1[0]),
	 	.o_b			(w_BM_1[1])
);

hamming_distance HD2(
		.i_a			(i_data[0]),
		.i_expect_a	(1'b0),
		.i_b			(i_data[1]),
		.i_expect_b	(1'b1),
		.o_a			(w_BM_2[0]),
	 	.o_b			(w_BM_2[1])
);

hamming_distance HD3(
		.i_a			(i_data[0]),
		.i_expect_a	(1'b1),
		.i_b			(i_data[1]),
		.i_expect_b	(1'b1),
		.o_a			(w_BM_3[0]),
	 	.o_b			(w_BM_3[1])
);

always_ff @(posedge i_clk or negedge i_rst_n) begin
	if(~i_rst_n) begin
		o_BM_0 <= 2'b0;
		o_BM_1 <= 2'b0;
		o_BM_2 <= 2'b0;
		o_BM_3 <= 2'b0;
	end else if (~i_en) begin
		o_BM_0 <= 2'b0;
		o_BM_1 <= 2'b0;
		o_BM_2 <= 2'b0;
		o_BM_3 <= 2'b0;
	end else begin
		o_BM_0 <= w_BM_0;
		o_BM_1 <= w_BM_1;
		o_BM_2 <= w_BM_2;
		o_BM_3 <= w_BM_3;
	end
end

endmodule

module hamming_distance(
	input logic 	i_a,
	input logic 	i_expect_a,
	input logic 	i_b,
	input logic 	i_expect_b,
	
	output logic 	o_a,
	output logic 	o_b
);

	assign o_a = i_a ^ i_expect_a;
	assign o_b = i_b ^ i_expect_b;

endmodule
